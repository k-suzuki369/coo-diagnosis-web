import { useState } from "react";
import dynamic from "next/dynamic";
import { motion } from "framer-motion";

const COODiagnosis = dynamic(() => Promise.resolve(DiagnosisComponent), {
  ssr: false,
});

function DiagnosisComponent() {
  const questions = [
    "CEO„ÅåÊó•„ÄÖ„ÅÆÊ•≠Âãô„Å´ÂøôÊÆ∫„Åï„Çå„ÄÅÊà¶Áï•„ÇíËÄÉ„Åà„ÇãÊôÇÈñì„ÅåÂèñ„Çå„Å¶„ÅÑ„Å™„ÅÑ",
    "ÊÑèÊÄùÊ±∫ÂÆö„ÅåÁ§æÈï∑„Å´ÈõÜ‰∏≠„Åó„ÄÅ‰ªñ„ÅÆÁµåÂñ∂„É°„É≥„Éê„Éº„ÅåÊÑèË¶ã„ÇíÂá∫„Åó„Å•„Çâ„ÅÑ",
    "Êñ∞Ë¶èÊé°Áî®„ÇÑÁµÑÁπîÊã°Â§ß„ÅÆ„Çπ„Éî„Éº„Éâ„ÅåÈÄü„Åô„Åé„Å¶„ÄÅÁÆ°ÁêÜ„ÅåËøΩ„ÅÑ„Å§„Åã„Å™„ÅÑ",
    "ÁµåÂñ∂Â±§„Å®ÁèæÂ†¥„ÅÆÈñì„Çí„Å§„Å™„ÅêÁÆ°ÁêÜËÅ∑„Åå‰∏çË∂≥„Åó„Å¶„ÅÑ„Çã",
    "ÈÉ®ÈñÄ„Åî„Å®„ÅÆÊ•≠Âãô„Éï„É≠„Éº„ÅåÊòéÁ¢∫„Åß„Å™„Åè„ÄÅÂ±û‰∫∫ÁöÑ„Å™ÈÅãÂñ∂„Å´„Å™„Å£„Å¶„ÅÑ„Çã",
    "Êñ∞Ë¶è‰∫ãÊ•≠„ÇÑ‰∫ãÊ•≠Êã°Â§ß„Å´‰º¥„ÅÑ„ÄÅÊñ∞„Åó„ÅÑ„É™„Éº„ÉÄ„Éº„ÅåËÇ≤„Å£„Å¶„ÅÑ„Å™„ÅÑ",
    "ÊàêÈï∑„Çπ„Éî„Éº„Éâ„Å´Âêà„Çè„Åõ„ÅüË©ï‰æ°Âà∂Â∫¶„ÇÑÂ†±ÈÖ¨Âà∂Â∫¶„ÅåÊï¥ÂÇô„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ",
    "„ÉÅ„Éº„É†„ÅÆ„Éë„Éï„Ç©„Éº„Éû„É≥„Çπ„ÇíÊúÄÂ§ßÂåñ„Åô„Çã„Åü„ÇÅ„ÅÆ‰ªïÁµÑ„Åø„ÅåÊ¨†„Åë„Å¶„ÅÑ„Çã",
    "ÁµåÂñ∂Â±§„ÅÆË≤†ÊãÖ„ÅåÂ§ß„Åç„Åè„ÄÅÊà¶Áï•Á≠ñÂÆö„ÅåÂæåÂõû„Åó„Å´„Å™„Å£„Å¶„ÅÑ„Çã",
    "Êñ∞Ë¶è‰∫ãÊ•≠„ÇÑÊµ∑Â§ñÂ±ïÈñã„ÇíËÄÉ„Åà„Å¶„ÅÑ„Çã„Åå„ÄÅÊó¢Â≠ò‰∫ãÊ•≠„ÅÆ„Éû„Éç„Ç∏„É°„É≥„Éà„ÅßÊâã‰∏ÄÊùØ"
  ];

  const [responses, setResponses] = useState(Array(questions.length).fill(null));
  const [submitted, setSubmitted] = useState(false);

  const handleResponse = (index, value) => {
    const updatedResponses = [...responses];
    updatedResponses[index] = value;
    setResponses(updatedResponses);
  };

  const handleSubmit = () => {
    setSubmitted(true);
  };

  const score = responses.reduce((acc, val) => acc + (val !== null ? val : 0), 0);
  let feedback = "";
  if (score <= 6) feedback = "‚úÖ COO„ÅØ„Åæ„Å†‰∏çË¶Å„Åß„Åô„Åå„ÄÅ‰ªäÂæå„ÅÆÊàêÈï∑„Å´Âøú„Åò„Å¶Ê§úË®é„Åô„Çã„Å®ËâØ„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ";
  else if (score <= 12) feedback = "‚ö†Ô∏è COO„ÅÆÂ∞éÂÖ•„ÇíÊ§úË®é„Åô„Åπ„Åç„Éï„Çß„Éº„Ç∫„Åß„Åô„ÄÇ‰ªä„ÅÆ„ÅÜ„Å°„Å´Ê∫ñÂÇô„ÇíÈÄ≤„ÇÅ„Çã„Åì„Å®„ÅåÊúõ„Åæ„Åó„ÅÑ„Åß„Åó„Çá„ÅÜ„ÄÇ";
  else feedback = "üö® „ÅÑ„Åæ„Åô„ÅêCOO„ÇíÂ∞éÂÖ•„Åó„Å™„ÅÑ„Å®„ÄÅÁµÑÁπî„ÅÆÊàêÈï∑„ÅåÈàçÂåñ„Åô„Çã„É™„Çπ„ÇØ„ÅåÈ´ò„ÅÑ„Åß„ÅôÔºÅ";

  return (
    <motion.div 
      className="min-h-screen flex items-center justify-center bg-gradient-to-br from-blue-900 to-gray-900 text-white"
      initial={{ opacity: 0 }} 
      animate={{ opacity: 1 }} 
      transition={{ duration: 1 }} 
    >
      <motion.div 
        className="max-w-3xl p-8 bg-white shadow-2xl rounded-2xl text-primary"
        initial={{ y: 50, opacity: 0 }} 
        animate={{ y: 0, opacity: 1 }} 
        transition={{ duration: 0.8 }} 
      >
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">COOË®∫Êñ≠„ÉÅ„Çß„ÉÉ„ÇØ„É™„Çπ„Éà</h1>
        {!submitted ? (
          <div>
            {questions.map((q, index) => (
              <motion.div 
                key={index} 
                className="mb-6 border-b pb-4"
                initial={{ opacity: 0, x: -30 }} 
                animate={{ opacity: 1, x: 0 }} 
                transition={{ delay: index * 0.1 }} 
              >
                <p className="text-lg font-medium text-gray-700">{q}</p>
                <div className="mt-3">
                  <motion.button
                    whileHover={{ scale: 1.1 }} 
                    whileTap={{ scale: 0.95 }} 
                    className={`mr-2 p-3 rounded-lg transition-all duration-300 ${
                      responses[index] === 2
                        ? "bg-green-600 text-white shadow-md"
                        : "bg-gray-200 hover:bg-green-500 hover:text-white"
                    }`}
                    onClick={() => handleResponse(index, 2)}
                  >
                    „ÅØ„ÅÑ
                  </motion.button>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className={`mr-2 p-3 rounded-lg transition-all duration-300 ${
                      responses[index] === 1
                        ? "bg-yellow-500 text-white shadow-md"
                        : "bg-gray-200 hover:bg-yellow-400 hover:text-white"
                    }`}
                    onClick={() => handleResponse(index, 1)}
                  >
                    „Å©„Å°„Çâ„Åã„Å®„ÅÑ„Åà„Å∞„ÅØ„ÅÑ
                  </motion.button>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.95 }}
                    className={`p-3 rounded-lg transition-all duration-300 ${
                      responses[index] === 0
                        ? "bg-red-600 text-white shadow-md"
                        : "bg-gray-200 hover:bg-red-500 hover:text-white"
                    }`}
                    onClick={() => handleResponse(index, 0)}
                  >
                    „ÅÑ„ÅÑ„Åà
                  </motion.button>
                </div>
              </motion.div>
            ))}
            <motion.button
              whileHover={{ scale: 1.05 }} 
              whileTap={{ scale: 0.95 }}
              onClick={handleSubmit}
              className="mt-6 w-full p-4 bg-blue-600 hover:bg-blue-700 text-white font-bold rounded-xl shadow-lg transition-all duration-300"
            >
              Ë®∫Êñ≠ÁµêÊûú„ÇíË¶ã„Çã
            </motion.button>
          </div>
        ) : (
          <motion.div className="text-center" initial={{ scale: 0.8, opacity: 0 }} animate={{ scale: 1, opacity: 1 }} transition={{ duration: 0.5 }}>
            <h2 className="text-2xl font-bold text-gray-800">Ë®∫Êñ≠ÁµêÊûú</h2>
            <p className="mt-4 text-lg">{feedback}</p>
          </motion.div>
        )}
      </motion.div>
    </motion.div>
  );
}

export default COODiagnosis;
